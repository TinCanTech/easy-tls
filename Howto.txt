EasyTLS HOWTO:


Introduction:

  The main focus of Easy-TLS is to provide an easy way to manage OpenVPN
  and EasyRSA assorted certificates and keys into fully verified 'inline'
  files which can be used immediately.

  The second focus of Easy-TLS is to provide TLS-Crypt-V2 key metadata
  which conforms to the original format as described by syzzer.
  (See full details below)

  The third focus is to provide a server side script to verify TLS crypt v2
  metadata and manage a disabled list, all prior to exposing x509 code.


Overview:

  * OpenVPN --tls-crypt-v2 keys and --tls-crypt-v2-verify script.

    These are new keys and a new script hook for OpenVPN.

    For full details see:
    https://github.com/OpenVPN/openvpn/blob/master/doc/tls-crypt-v2.txt
    (syzzer's work)


  * Easy-TLS

    Easy-TLS plugs directly into Easy-RSA3. This is a hard requirement.
    Once installed into your Easy-RSA3 working directory Easy-TLS can 
    manage the following items:

    * OpenVPN TLS Auth keys: OpenVPN --tls-auth / --key-direction

    * OpenVPN TLS Crypt keys: OpenVPN --tls-crypt

    * OpenVPN TLS Crypt Version 2 keys ** Nice **

    * Manage 'inline' files, including:

      * Easy-RSA3 x509 Public Key Infra-structure
      * OpenVPN specific TLS keys

    * Provide metadata for TLS-Crypt-V2 keys

    * Provide server side script tls-crypt-v2-verify.sh
      This script uses metadata fields to verify a client certificate
      serial number and CA finger print before exposing any x509 code.
      This is effectively a software configurable firewall for OpenVPN.


TLS Crypt v2 details:

  * TLS Crypt v2 client key metadata

    This metadata field is constructed as follows:

    1.  metadata_version string: "metadata_version_easytls"
        (No longer use a specific version because it was to easy to change)

    2   CA Fingerprint (Formatted to one contiguous string)

    3.  Client certificate serial number

    4.  Client certificate Common Name

    5.  Creation date (date +%s - "Seconds since...")

    6.  User definable custom group

        This is a string which the user can use for identification
        eg. "CompanyName" (One contiguous string)

  * TLS Crypt v2 disabled list

    Use this list to temporarily drop specific client connections.

  * TLS Crypt v2 verification method

    1. Verify via CRL

       The CRL is searched for client serial number and the client 
       connection is dropped if the client is found to be revoked.
       This is the default method which conforms to syzzers original
       specification.

    2. Verify via CA --verify-via-ca

       The client serial number status is verified via `openssl ca`
       This method works but is not recommended by OpenSSL.

    3. Verify via openssl index.txt --verify-via-index

       The client serial number status is verified via the openssl
       index.txt file.

       Combined with the --cache-id option (In both EasyTLS and
       tls-crypt-v2-verify.sh) the verify script never has to load
       openssl -- For some minor performance gain on a busy server.

Note about exit codes:

  OpenVPN --log does not accept data from scripts under Windblows
  so the exit codes are absolutely necessary to debug errors.


Howto resolve issues with Invalid .inline files:

  If you receive a message informing you that you have "Revoked certs"
  then simply use './easytls inline-remove <filename-base>'
  This will delete the offending file and keep the EasyTLS index up-to-date.
  Invalid files are caused by x509 certificates which have been revoked.
  The .inline file is of no further value if the certificate has been revoked.

  If you receive a message informing you that you have "Renewed certs"
  then simply use './easytls inline-renew <filename-base>'
  This will delete the offending file and keep the EasyTLS index up-to-date
  and then recreate a new .inline file from the renewed certificate
  and keep the EasyTLS index up-to-date.


Howto resolve issues with the EasyTLS inline-index:

  In the unlikely event that something does go wrong with the EasyTLS Inline Index
  then simply use './easytls inline-index-rebuild'
  EasyTLS will attempt to rebuild your index.  (Please report issues on github)


Howto import your current TLS key files:

  If you already have a complete EasyRSA PKI then EasyTLS should work directly.
  However, EasyTLS requires that any TLS keys you are already using are imported.

  To import your keys use (<commonName> is only required for TLS-Crypt-V2 keys):
    './easytls import-key <key-type> <key-name> <commonName>'

  TLS-Auth key:
    './easytls import-key <key-type> <key-name>'

  TLS-Crypt key:
    './easytls import-key <key-type> <key-name>'

  TLS-Crypt-V2 key:
    './easytls import-key <key-type> <key-name> <commonName>'

    <commonName> must be the commonName of the x509 certificate of the associated
    VPN node.

    Example:
      Server; x509 commonName 'server01' and a TLS-Crypt-V2 key 'tls-cr-v2-srv.key'
      * './easytls import-key tls-crypt-v2 tls-cr-v2-srv.key server01'
      The imported key will be: ./easyrsa/pki/easytls/server01-tls-crypt-v2.key

      Client; x509 commonName 'alice' and a TLS-Crypt-V2 key 'tls-cr-v2-alice.key'
      * './easytls import-key tls-crypt-v2 tls-cr-v2-alice.key alice'
      The imported key will be: ./easyrsa/pki/easytls/alice-tls-crypt-v2.key

      The default <commonName> is <key-name> without the .key extension.
      (This is unlikely to be your use case and may be removed in the future)

