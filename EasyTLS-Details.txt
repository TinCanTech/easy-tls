Easy-TLS HOWTO:


Introduction:

  The main focus of Easy-TLS is to provide an easy way to manage OpenVPN
  and EasyRSA assorted certificates and keys into fully verified 'inline'
  files which can be used immediately.

  The second focus of Easy-TLS is to provide TLS-Crypt-V2 key metadata
  which conforms to the original format as described by syzzer.
  (See full details below)

  The third focus is to provide a server side script to verify TLS-crypt-v2
  metadata and manage a disabled list, all prior to exposing x509 code.


Overview:

  * OpenVPN --tls-crypt-v2 keys and --tls-crypt-v2-verify script.

    These are new keys and a new script hook for OpenVPN.

    For full details see:
    https://github.com/OpenVPN/openvpn/blob/master/doc/tls-crypt-v2.txt
    (syzzer's work)


  * Usage:

    To use the 'easytls' script simply copy it to the same directory that
    you have installed easyrsa in.  If you prefer to keep the script in
    a $PATH directory then use option: '--pki-dir=<DIR>' to point the script
    to your working Easy-RSA PKI directory.

    To use the 'easytls-cryptv2-verify.sh' script simply copy it to your server
    scripts directory and use option: '-c|--ca=<PATH>' to point the script
    to your working Easy-RSA PKI directory. This is the same directory as above.

    For full help use:
    * ./easytls -h
    * ./easytls-cryptv2-verify.sh -h


Easy-TLS details:

    Easy-TLS plugs directly into Easy-RSA3. This is a hard requirement.
    Once installed into your Easy-RSA3 working directory Easy-TLS can 
    manage the following items:

    * OpenVPN TLS Auth keys: OpenVPN --tls-auth / --key-direction

    * OpenVPN TLS Crypt keys: OpenVPN --tls-crypt

    * OpenVPN TLS Crypt Version 2 keys ** Nice **

    * Manage 'inline' files, including:

      * Easy-RSA3 x509 Public Key Infra-structure
      * OpenVPN specific TLS keys

    * Provide metadata for TLS-Crypt-V2 keys

    * Provide server side script 'easytls-cryptv2-verify.sh'
      This script uses metadata fields to verify a client certificate
      serial number and CA finger print before exposing any x509 code.
      This is effectively a software configurable firewall for OpenVPN.


easytls-cryptv2-verify.sh details:

  * EasyTLS-Crypt-v2 client key metadata

    This metadata field is constructed as follows:

    1.  metadata_version string: "easytls"
        EasyTLS metadata version string is "easytls-$EASYTLS_VERSION"
        easytls-cryptv2-verify.sh only uses 'easytls' and drops the version nummber.

    2   CA Fingerprint (Formatted to one contiguous string, CA-Identity)

    3.  Client certificate serial-number

    4.  Client certificate CommonName

    5.  Creation-date (date +%s - "Seconds since...")

    6.  User definable Custom-Group

        This is a string which the user can use for identification
        eg. "CompanyName" (One contiguous string)

    7.  Hardware-address-list


  * EasyTLS-Crypt-v2 disabled list

    Use this list to temporarily drop specific client connections.


  * EasyTLS-Crypt-v2 verification method

    1. Verify via CRL (Default)

       The CRL is searched for client serial number and the client 
       connection is dropped if the client is found to be revoked.
       This is the default method which conforms to syzzers original
       specification.

    2. Verify via CA --verify-via-ca (Not recommended)

       The client serial number status is verified via `openssl ca`
       This method works but is not recommended by OpenSSL.

    3. Verify via openssl index.txt --verify-via-index (Preferred)

       The client serial number status is verified via the openssl
       index.txt file.

       Combining this with:
       * EasyTLS 'save-id' command, to save a file containing the
         CA fingerprint: 'easytls/easytls-ca-identity.txt'
       * tls-crypt-v2-verify --cache-id option, which uses the file above
         instead of loading openssl to generate the CA fingerprint.
       Then tls-crypt-v2-verify.sh *never* has to load the openssl binary;
       For some minor performance gain on a busy server.

       Option --preload-cache-id="CA_ID" allows the server config to load
       the CA Identity from the command line as a parameter, eliminating
       the need to read the CA Identity file from disk, repeatedly,
       and may be even faster than using --cache-id.

       CA Identity is the openssl output for the CA fingerprint formatted
       to one contiguous string:

       * openssl fingerprint output:  'SHA1 Fingerprint=95:DC:42:...'
       * EasyTLS CA Identity format:  '95DC42...'

       Example configuration command to use in an OpenVPN config file:

       NOTE: This example is wrapped at line length, in your config file it
       must not be wrapped.  Also, OpenVPN does not expand variables in a
       config file, so all paths and options must be exanded in full.

       tls-cryptv2-verify '/home/tct/easyrsa3/tls-crypt-v2-verify.sh -v
         -c=/home/tct/easyrsa3/pki2 -g=tincantech --verify-via-index
         -t=365 --preload-cache-id=E19982D9C063CEC74F66B7D31BF7B9306A609A8E'


Note about exit codes:

  OpenVPN --log does not accept data from scripts under Windows
  so the exit codes are absolutely necessary to debug errors.


Howto resolve issues with Invalid .inline files:

  If you receive a message informing you that you have "Revoked certs"
  then simply use './easytls inline-remove <filename-base>'
  This will delete the offending file and keep the EasyTLS index up-to-date.
  Invalid files are caused by x509 certificates which have been revoked.
  The .inline file is of no further value if the certificate has been revoked.

  If you receive a message informing you that you have "Renewed certs"
  then simply use './easytls inline-renew <filename-base>'
  This will delete the offending file and keep the EasyTLS index up-to-date
  and then recreate a new .inline file from the renewed certificate
  and keep the EasyTLS index up-to-date.


Howto resolve issues with the EasyTLS inline-index:

  In the unlikely event that something does go wrong with the EasyTLS Inline Index
  then simply use './easytls inline-index-rebuild'
  EasyTLS will attempt to rebuild your index.  (Please report issues on github)


Howto import your current TLS key files:

  If you already have a complete EasyRSA PKI then EasyTLS should work directly.
  However, EasyTLS requires that any TLS keys you are already using are imported.

  To import your keys use (<commonName> is only required for TLS-Crypt-V2 keys):
    './easytls import-key <key-type> <key-name> <commonName>'

  TLS-Auth key:
    './easytls import-key tls-auth <key-name>'

  TLS-Crypt key:
    './easytls import-key tls-crypt <key-name>'

  TLS-Crypt-V2 key:
    './easytls import-key tls-crypt-v2 <key-name> <commonName>'

    <commonName> must be the commonName of the x509 certificate of the associated
    VPN node.

    Example:

    - Server; x509 commonName 'server01' and a TLS-Crypt-V2 key 'tls-cr-v2-srv.key'

        $ ./easytls import-key tls-crypt-v2 tls-cr-v2-srv.key server01

        The imported key will be: ./easyrsa/pki/easytls/server01-tls-crypt-v2.key

    - Client; x509 commonName 'alice' and a TLS-Crypt-V2 key 'tls-cr-v2-alice.key'

        $ ./easytls import-key tls-crypt-v2 tls-cr-v2-alice.key alice

        The imported key will be: ./easyrsa/pki/easytls/alice-tls-crypt-v2.key
