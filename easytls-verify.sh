#!/bin/sh

# Copyright - negotiable
copyright ()
{
: << VERBATUM_COPYRIGHT_HEADER_INCLUDE_NEGOTIABLE
# easytls-cryptv2-client-connect.sh -- Do simple magic
#
# Copyright (C) 2020 Richard Bonhomme (Friday 13th of March 2020)
# https://github.com/TinCanTech/easy-tls
# tincantech@protonmail.com
# All Rights reserved.
#
# This code is released under version 2 of the GNU GPL
# See LICENSE of this project for full licensing details.
#
# Acknowledgement:
# syzzer: https://github.com/OpenVPN/openvpn/blob/master/doc/tls-crypt-v2.txt
#
# Lock client connections to specific client devices.
#
VERBATUM_COPYRIGHT_HEADER_INCLUDE_NEGOTIABLE
}

# Help
help_text ()
{
	help_msg='
  easytls-verify.sh

  This script is intended to be used by tls-crypt-v2 client keys
  generated by EasyTLS.  See: https://github.com/TinCanTech/easy-tls

  Options:
  help|-h|--help      This help text.
  -v|--verbose        Be a lot more verbose at run time (Not Windows).
  -c|--ca=<path>      Path to CA *REQUIRED*
  -x|--x509           Check X509 certificate validity
  -b|--base-dir       Path to OpenVPN base directory. (Windows Only)
                      Default: C:/Progra~1/OpenVPN
  -t|--tmp-dir        Temp directory where the hardware address list is written.
                      (Required only if easytls-client-connect.sh is used)
                      Default: *nix /tmp | Windows C:/Windows/Temp
  -o|--ovpnbin-dir    Path to OpenVPN bin directory. (Windows Only)
                      Default: C:/Progra~1/OpenVPN/bin
  -e|--ersabin-dir    Path to Easy-RSA3 bin directory. (Windows Only)
                      Default: C:/Progra~1/Openvpn/easy-rsa/bin

  Exit codes:
  0   - Allow connection, Client hwaddr is correct or not required.
  1   - Disallow connection, Client cert not recognised.
  2   - Disallow connection, Client cert revoked.
  3   - Disallow connection, CA PKI dir not defined. (REQUIRED)
  4   - Disallow connection, CA cert not found.
  5   - Disallow connection, index.txt not found.
  9   - Disallow connection, unexpected failure. (BUG)
  11  - Disallow connection, missing X509 client cert serial. (BUG)
  21  - USER ERROR Disallow connection, options error.

  253 - Disallow connection, exit code when --help is called.
  254 - BUG Disallow connection, fail_and_exit() exited with default error code.
  255 - BUG Disallow connection, die() exited with default error code.
'
	"$EASYTLS_PRINTF" "%s\n" "$help_msg"

	# For secrity, --help must exit with an error
	die 253
}

# Wrapper around 'printf' - clobber 'print' since it's not POSIX anyway
# shellcheck disable=SC1117
print() { "$EASYTLS_PRINTF" "%s\n" "$1"; }

# Exit on error
die ()
{
	"$EASYTLS_RM" -f "$client_metadata_file"
	[ -n "$help_note" ] && "$EASYTLS_PRINTF" "\n%s\n" "$help_note"
	"$EASYTLS_PRINTF" "\n%s\n" "ERROR: $1"
	"$EASYTLS_PRINTF" "%s\n" "https://github.com/TinCanTech/easy-tls"
	exit "${2:-255}"
}

# easytls-cryptv2-client-connect failure, not an error.
fail_and_exit ()
{
	"$EASYTLS_RM" -f "$client_metadata_file"
	if [ $EASYTLS_VERBOSE ]
	then
		"$EASYTLS_PRINTF" "%s " "$easytls_msg"
		[ -z "$success_msg" ] || "$EASYTLS_PRINTF" "%s\n" "$success_msg"
		"$EASYTLS_PRINTF" "%s\n%s\n" "$failure_msg $common_name" "$1"

		"$EASYTLS_PRINTF" "%s\n" "https://github.com/TinCanTech/easy-tls"
	else
		"$EASYTLS_PRINTF" "%s %s %s %s\n" \
			"$easytls_msg" "$success_msg" "$failure_msg" "$1"
	fi
	exit "${2:-254}"
} # => fail_and_exit ()

# Log fatal warnings
warn_die ()
{
	if [ -n "$1" ]
	then
		fatal_msg="${fatal_msg}
$1"
	else
		[ -z "$fatal_msg" ] || die "$fatal_msg" 21
	fi
}

# Log warnings
warn_log ()
{
	if [ -n "$1" ]
	then
		warn_msg="${warn_msg}
$1"
	else
		[ -z "$warn_msg" ] || "$EASYTLS_PRINTF" "%s\n" "$warn_msg"
	fi
}

# Get the client certificate serial number from env
get_ovpn_client_serial ()
{
	"$EASYTLS_PRINTF" '%s' "$tls_serial_hex_0" | \
		"$EASYTLS_SED" -e 's/://g' -e 'y/abcdef/ABCDEF/'
}

# Allow connection
connection_allowed ()
{
	absolute_fail=0
}

# Initialise
init ()
{
	# Fail by design
	absolute_fail=1

	# Defaults
	EASYTLS_server_pid=$PPID

	# Log message
	easytls_msg="* EasyTLS-verify"
}

# Dependancies
deps ()
{
	# Identify Windows
	[ "$KSH_VERSION" ] && EASYTLS_FOR_WINDOWS=1

	# Required binaries
	EASYTLS_OPENSSL='openssl'
	EASYTLS_CAT='cat'
	EASYTLS_DATE='date'
	EASYTLS_GREP='grep'
	EASYTLS_SED='sed'
	EASYTLS_PRINTF='printf'
	EASYTLS_RM='rm'

	# Directories and files
	if [ $EASYTLS_FOR_WINDOWS ]
	then
		# Windows
		EASYTLS_tmp_dir="${EASYTLS_tmp_dir:-C:/Windows/Temp}"
		base_dir="${EASYTLS_base_dir:-C:/Progra~1/Openvpn}"
		EASYTLS_ersabin_dir="${EASYTLS_ersabin_dir:-${base_dir}/easy-rsa/bin}"
		EASYTLS_ovpnbin_dir="${EASYTLS_ovpnbin_dir:-${base_dir}/bin}"
		export PATH="${EASYTLS_ersabin_dir};${EASYTLS_ovpnbin_dir};${PATH};"
		[ -d "$EASYTLS_ersabin_dir" ] || die "Missing easy-rsa\bin dir" 35
		[ -d "$EASYTLS_ovpnbin_dir" ] || die "Missing Openvpn\bin dir" 36
		[ -f "${EASYTLS_ovpnbin_dir}/${EASYTLS_OPENSSL}.exe" ] \
			|| die "Missing openssl" 119
		[ -f "${EASYTLS_ersabin_dir}/${EASYTLS_CAT}.exe" ] || \
			die "Missing cat" 113
		[ -f "${EASYTLS_ersabin_dir}/${EASYTLS_DATE}.exe" ] || \
			die "Missing date" 114
		[ -f "${EASYTLS_ersabin_dir}/${EASYTLS_GREP}.exe" ] || \
			die "Missing grep" 115
		[ -f "${EASYTLS_ersabin_dir}/${EASYTLS_SED}.exe" ] || \
			die "Missing sed" 116
		[ -f "${EASYTLS_ersabin_dir}/${EASYTLS_PRINTF}.exe" ] || \
			die "Missing printf" 118
	else
		EASYTLS_tmp_dir="${EASYTLS_tmp_dir:-/tmp}"
	fi

	# CA_dir MUST be set with option: -c|--ca
	[ -d "$CA_dir" ] || die "Path to CA directory is required, see help" 3

	# CA required files
	ca_cert="$CA_dir/ca.crt"
	index_txt="$CA_dir/index.txt"

	# Ensure we have all the necessary files
	[ -f "$ca_cert" ] || {
		help_note="This script requires an EasyRSA generated CA."
		die "Missing CA certificate: $ca_cert" 4
		}
	[ -f "$index_txt" ] || {
		help_note="This script requires an EasyRSA generated DB."
		die "Missing index.txt: $index_txt" 5
		}
}

#######################################

# Initialise
init

# Options
while [ -n "$1" ]
do
	# Separate option from value:
	opt="${1%%=*}"
	val="${1#*=}"
	empty_ok="" # Empty values are not allowed unless expected

	case "$opt" in
	help|-h|-help|--help)
		empty_ok=1
		help_text
	;;
	-v|--verbose)
		empty_ok=1
		EASYTLS_VERBOSE=1
	;;
	-c|--ca)
		CA_dir="$val"
	;;
	-x|--x509)
		empty_ok=1
		x509_check=1
	;;
	-b|--base-dir)
		EASYTLS_base_dir="$val"
	;;
	-t|--tmp-dir)
		EASYTLS_tmp_dir="$val"
	;;
	-o|--openvpn-bin-dir)
		EASYTLS_ovpnbin_dir="$val"
	;;
	-e|--easyrsa-bin-dir)
		EASYTLS_ersabin_dir="$val"
	;;
	0)
		empty_ok=1
		# cert_depth="0" # Currently not used
	;;
	1)
		# DISABLE CA verify
		warn_log '>< >< >< DISABLE CA CERTIFICATE VERIFY >< >< ><'
		empty_ok=1
		ignore_ca_verify=1
	;;
	*)
		empty_ok=1
		if [ -f "$opt" ]
		then
			[ $EASYTLS_VERBOSE ] && warn_log "Ignoring temp file: $opt"
		else
			[ $EASYTLS_VERBOSE ] && warn_log "Ignoring unknown option: $opt"
		fi
	;;
	esac

	# fatal error when no value was provided
	if [ ! $empty_ok ] && { [ "$val" = "$1" ] || [ -z "$val" ]; }; then
		warn_die "Missing value to option: $opt"
	fi
	shift
done

# Dependencies
deps

# Report and die on fatal warnings
warn_die

# Report option warnings
warn_log

# Ignore CA verify
[ $ignore_ca_verify ] && exit 0

# TLS verify checks

	# Set Client certificate serial number from Openvpn env
	client_serial="$(get_ovpn_client_serial)"

	# Verify Client certificate serial number
	[ -n "$client_serial" ] || die "MISSING CLIENT CERTIFICATE SERIAL" 11

	# There will ONLY be a hardware file
	# if the client does have a --tls-crypt-v2 key
	# --tls-crypt-v2, --tls-auth and --tls-crypt
	# are mutually exclusive in client mode
	# Set hwaddr file name
	client_metadata_file="${EASYTLS_tmp_dir}/${client_serial}.${EASYTLS_server_pid}"

	# Check cert serial is known by index.txt
	serial="^.*[[:blank:]][[:digit:]]*Z[[:blank:]]*${client_serial}[[:blank:]]"
	valids="^V[[:blank:]]*[[:digit:]]*Z[[:blank:]]*${client_serial}[[:blank:]]"
	if "$EASYTLS_GREP" -q "${serial}" "$index_txt"
	then
		if [ $x509_check ]
		then
			if "$EASYTLS_GREP" -q "${valids}" "$index_txt"
			then
				# Valid Cert serial found in PKI index.txt
				success_msg=" ==> Valid Client cert serial"
			else
				fail_and_exit "CLIENT CERTIFICATE IS REVOKED" 2
			fi
		else
			# Cert serial found in PKI index.txt
			success_msg=" ==> Recognised Client cert serial"
		fi
	else
		"$EASYTLS_GREP" --version > /dev/null || die "Cannot find grep"
		# Cert serial not found in PKI index.txt
		fail_and_exit "ALIEN CLIENT CERTIFICATE SERIAL" 1
	fi

	# Allow this connection
	connection_allowed

	# If there is no hwaddr file then
	# create a simple hwaddr file for client-connect
	# This implies that the client is not bound to a hwaddr
	[ -f "$client_metadata_file" ] || \
		"$EASYTLS_PRINTF" '%s' '000000000000' > "$client_metadata_file"

# Any failure_msg means fail_and_exit
[ -n "$failure_msg" ] && fail_and_exit "NEIN: $failure_msg" 9

# For DUBUG
[ "$FORCE_ABSOLUTE_FAIL" ] && \
	absolute_fail=1 && failure_msg="FORCE_ABSOLUTE_FAIL"

# There is only one way out of this...
[ $absolute_fail -eq 0 ] || fail_and_exit "ABSOLUTE FAIL" 9

# All is well
[ $EASYTLS_VERBOSE ] && \
	"$EASYTLS_PRINTF" "%s\n" "<EXOK> $easytls_msg $success_msg"

exit 0
