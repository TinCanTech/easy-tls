Archive old code
================

: << 'DISABLED_INLINE_RENEW'

	[ $# -ge 1 ] || die "Required option(s): <filename_base>"

	name="$1"
	shift

	cmd_opts=""
	while [ -n "$1" ]; do
		case "$1" in
			0|1)	key_direction="$1" ;;
			add-dh)	cmd_opts="$cmd_opts add-dh" ;;
			no-key)	cmd_opts="$cmd_opts no-key" ;;
			*)	warn "Ignoring unknown command option: '$1'" ;;
		esac
		shift
	done

	inline_file="$EASYTLS_PKI/$name.inline"
	crt_file="$EASYRSA_PKI/issued/$name.crt"

	[ -f "$inline_file" ] || die "inline_renew: Missing: $inline_file"
	[ -f "$crt_file" ] || die "inline_renew: Missing: $crt_file"
	# This is very borked
	#x509_cert_serial
	die "inline_renew is borked"

	# Collect the attributes of .inline file
	inline_is_base="$("$EASYTLS_GREP" -c '^# EasyTLS - File name base:.*$' "$inline_file")"
	inline_is_tlsauth="$("$EASYTLS_GREP" -c '^<tls-auth>$' "$inline_file")"
	inline_is_tlscrypt="$("$EASYTLS_GREP" -c '^<tls-crypt>$' "$inline_file")"
	inline_is_tlscryptv2="$("$EASYTLS_GREP" -c '^<tls-crypt-v2>$' "$inline_file")"

	# Verify .inline is valid
	[ $inline_is_base -eq 1 ] || \
		die "File is not valid .inline: $inline_file"
	one_type=$((inline_is_tlsauth+inline_is_tlscrypt+inline_is_tlscryptv2))
	[ $one_type -le 1 ] || die "File is not valid .inline: $inline_file"

	# Determine the type of .inline file
	inline_type="tls-base"
	[ $inline_is_tlsauth -eq 1 ] && inline_type="tls-auth"
	[ $inline_is_tlscrypt -eq 1 ] && inline_type="tls-crypt"
	[ $inline_is_tlscryptv2 -eq 1 ] && inline_type="tls-crypt-v2"

	# If --key-direction is specified in command line but does not match
	# current inline setting then issue a warning
	if [ "$inline_type" = "tls-auth" ] && [ $key_direction ]
	then
		# Determine inline <key-direction>
		is_key_dir="$(inline_renew_key_direction)"
		case "$is_key_dir" in
		0|1)
			# Verify if command line wants to change inline
			[ $key_direction -eq $is_key_dir ] || \
			warn "Command line will change inline key-direction"
		;;
		*)
			# Assume key-direction is missing from inline
			warn "TLS-auth key-direction missing"
		;;
		esac
	fi

	# Auto-detect --key-direction if not specified in command line
	# default to current inline file or no_key_direction
	if [ "$inline_type" = "tls-auth" ] && [ ! $key_direction ]
	then
		# Determine inline <key-direction>
		is_key_dir="$(inline_renew_key_direction)"
		case "$is_key_dir" in
			0|1)	key_direction="$is_key_dir" ;;
			*)	warn "TLS-auth key-direction missing" ;;
		esac
	fi

	# Confirm renew type
	confirm "Renew inline file ? " "yes" \
		"Renew: $inline_file as Type: $inline_type"

	# Make a backup of inline file incase renew fails
	[ -f "$inline_file.backup" ] && \
		die "Backup already exists: $inline_file.backup"
	"$EASYTLS_CP" "$inline_file" "$inline_file.backup" || \
		die "Unable to create backup: $inline_file.backup"

	# Remove the old .inline file
	# .inline HASH is checked prior to removal
	silent_remove=1
	inline_remove "$name"

	# Disable completion notices from sub processes
	#silent_inline=1

	# Build the new .inline file
	case "$inline_type" in
		tls-base)
			inline_base "$name" $cmd_opts || \
				die "Failed to create inline base file"
			inline_index_update add
		;;
		tls-auth)
			inline_tls_auth "$name" "$key_direction" $cmd_opts
		;;
		tls-crypt)
			inline_tls_crypt_v1 "$name" $cmd_opts
		;;
		tls-crypt-v2)
			inline_tls_crypt_v2 "$name" $cmd_opts
		;;
		*)
			die "Unknown error inline_type: $inline_type"
		;;
	esac

	# Renew successful, remove the backup
	"$EASYTLS_RM" -f "$inline_file.backup"

	notice "Inline $inline_type file renewed: $inline_file"

DISABLED_INLINE_RENEW





	# TODO
	# TODO WARNING, inline_index_rebuild is a work in progress
	# TODO

: << 'DISABLED_INLINE_INDEX_REBUILD'

	# Do not over write current easytls-inline-index.txt.backup
	[ -f "$EASYTLS_INLINE_INDEX.backup" ] && \
		die "Backup file already exists: $EASYTLS_INLINE_INDEX.backup"

	# Do not over write current easytls-inline-index.hash.backup
	[ -f "$EASYTLS_INLINE_X_HASH.backup" ] && \
		die "Backup file already exists: $EASYTLS_INLINE_X_HASH.backup"

	# Warn!
	confirm "Rebuild inline index file ? " "yes" \
		"WARNING: You are about to rebuild easytls-index.txt"

	# Backup current easytls-inline-index.txt
	"$EASYTLS_CP" "$EASYTLS_INLINE_INDEX" "$EASYTLS_INLINE_INDEX.backup" || \
		die "Failed to backup: $EASYTLS_INLINE_INDEX"

	# Backup current easytls-inline-index.hash.backup
	"$EASYTLS_CP" "$EASYTLS_INLINE_X_HASH" "$EASYTLS_INLINE_X_HASH.backup" || \
		die "Failed to backup: $EASYTLS_INLINE_X_HASH"

	# Check OpenSSL index.txt
	[ -f "$EASYRSA_INDEX" ] || missing_file "$EASYRSA_INDEX"

	# Flag for functions which need to know the index is being rebuilt
	index_rebuild=1

	# Get list of inline file names by extracting CN and sub from index
	etls_inline_CNsub_name_list="$(inline_index_cn_subname_list)"

	# Create tls dir index file
	generate_and_validate_date head_date
	head_text="# EastTLS inline-index - Created: $head_date"
	"$EASYTLS_PRINTF" '%s\n' "$head_text" > "$EASYTLS_INLINE_INDEX" || \
		inline_index_rebuild_reset "Failed to create inline-index"

	# Create inline-index hash file
	inline_index_save_hash || \
		inline_index_rebuild_reset "Failed to create inline-index Hash."

	# Create records from EasyTLS index names
	for i in $etls_inline_CNsub_name_list
	do
		# Reset flag
		unset add_inline_record

		# Clear the previous HASH
		unset inline_hash

		# THIS CAN GO
		# If the name is not a single word then the certificate
		# has been renewed in EasyRSA, which means:
		# There are two Valid record in OpenSSL index.txt
		# with the same CommonName
		# Mitigate this disaster here
		#name="$("$EASYTLS_PRINTF" "%s" "$i" | "$EASYTLS_AWK" 1 ORS=' ')"
		#name="${name%% *}"

		inline_file="$EASYTLS_PKI/$i.inline"
		[ -f "$inline_file" ] || \
			inline_index_rebuild_reset "Missing Inline file: $inline_file"

		# Inline serial
		x509_cert_serial "${inline_file}" inline_serial || {
			error_msg "inline_index_update - x509_cert_serial"
			return 1
			}

		easytls_verbose "inline_serial: ^$inline_serial^"
		[ -z "$inline_serial" ] && \
			inline_index_rebuild_reset "inline_index_rebuild: No inline_serial"

		inline_common_name=""
		inline_crt_common_name
		easytls_verbose "inline_common_name: ^$inline_common_name^"
		[ -z "$inline_common_name" ] && \
			inline_index_rebuild_reset \
				"inline_index_rebuild: No inline_common_name"

		if [ "$i" = "$inline_common_name" ]
		then
			unset sub_name
			unset TLSKEY_SUBNAME
		else
			# This is ugly and needs to be re-thought
			sub_name="${i##"${inline_common_name}-"}"
			TLSKEY_SUBNAME="$sub_name"
		fi

		name="$inline_common_name"
		[ -z "$name" ] && inline_index_rebuild_reset "No name"
		easytls_verbose "name: ^$name^"

		# If the x509 cert is missing the inline file still has a copy.
		# The cert may have been revoked and this will create an invalid
		# record which can be removed with `inline-remove`
		crt_file="$EASYRSA_PKI/issued/$name.crt"
		[ -f "$crt_file" ] || warn "Missing crt_file: $crt_file"

		# If there is an inline file for this name
		# then recreate the inline easytls-index record
		# EasyTLS User can remove/create a new inline file
		# Note: The extra space ..
		[ -f "$inline_file" ] && {
			add_inline_record=1
			etls_inline_record_list="$etls_inline_record_list $name "
			}

		# Add the record
		# TODO: Add die here
		[ $add_inline_record ] && inline_index_update add
		:
	done

	# Inform
	notice "Inline index file successfully rebuilt: $EASYTLS_INLINE_INDEX"
	notice "Use 'easytls status' to confirm."
	print

DISABLED_INLINE_INDEX_REBUILD



# Reset files if index rebuild fails
inline_index_rebuild_reset ()
{
: << DISABLED_INLINE_INDEX_REBUILD_RESET

	"$EASYTLS_CP" -f "$EASYTLS_INLINE_INDEX.backup" "$EASYTLS_INLINE_INDEX"
	"$EASYTLS_RM" -f "$EASYTLS_INLINE_INDEX.backup"

	"$EASYTLS_CP" -f "$EASYTLS_INLINE_X_HASH.backup" "$EASYTLS_INLINE_X_HASH"
	"$EASYTLS_RM" -f "$EASYTLS_INLINE_X_HASH.backup"

	die "Inline index rebuild failed."

DISABLED_INLINE_INDEX_REBUILD_RESET

} # => inline_index_rebuild_reset ()







			# easytls-verify.sh - Required for --tls-auth or --tls-crypt clients
			#[ $opt_client_connect ] && {
			#	"$EASYTLS_PRINTF" '%s' 'tls-verify'
			#	"$EASYTLS_PRINTF" ' %s' "'"
			#	[ -n "${EASYTLS_FOR_WINDOWS}" ] && \
			#		"$EASYTLS_PRINTF" "%s " "$EASYTLS_SH_EXE"
			#	"$EASYTLS_PRINTF" '%s' "${EASYTLS_VERIFY_V1_SH}"
			#	"$EASYTLS_PRINTF" ' %s' "-l=${EASYTLS_VERIFY_V1_VARS}"
			#	[ "$opt_no_ca" ] && "$EASYTLS_PRINTF" ' %s' "${opt_no_ca}"
			#	"$EASYTLS_PRINTF" ' %s' "-c=${opt_ca_path}"
			#	[ "$opt_tmp_dir" ] && "$EASYTLS_PRINTF" ' %s' "${opt_tmp_dir}"
			#	"$EASYTLS_PRINTF" '%s\n\n' "'"
			#	}




############################################################################
#
# IMPORT Section
#

# Import pre-existing TLS keys
import_key ()
{
	# Temporarily disabled
	error_msg "'import-key' has been disabled until further notice."
	return 1

	[ "$#" -ge 2 ] || \
	die "Required option(s): <file-type> <file-name>"
	key_type="$1"

	# WARNING: Cannot verify the source is actually a valid key!
	key_file="$2"
	[ -f "$key_file" ] || die "Cannot find file: $key_file"

	case "$key_type" in
	tls-auth)
		dest_key="$EASYTLS_PKI/tls-auth.key"
		[ -f "$dest_key" ] && die "Key file exists: $dest_key"
		"$EASYTLS_CP" "$key_file" "$dest_key" || \
			die "Failed to import file: $key_file"
		;;
	tls-crypt)
		dest_key="$EASYTLS_PKI/tls-crypt.key"
		[ -f "$dest_key" ] && die "Key file exists: $dest_key"
		"$EASYTLS_CP" "$key_file" "$dest_key" || \
			die "Failed to import file: $key_file"
		;;
	tls-crypt-v2)
		# Validate commonName
		default_cert_CN="${key_file%.key}"
		requested_cert_CN="${3:-$default_cert_CN}"

		cert_file="$EASYRSA_PKI/$requested_cert_CN.crt"
		[ -f "$cert_file" ] || die "Cannot find file: $cert_file"
		actual_cert_CN="$(easytls_ssl_crt_common_name)"

		if [ "$requested_cert_CN" = "$actual_cert_CN" ]
		then
			: # CN OK
		else
			help_note="Requested CN $requested_cert_CN"
			die "does not match certificate $actual_cert_CN"
		fi

		dest_key="$EASYTLS_PKI/$actual_cert_CN-tls-crypt-v2.key"
		[ -f "$dest_key" ] && die "Key file exists: $dest_key"
		"$EASYTLS_CP" "$key_file" "$dest_key" || \
			die "Failed to import file: $key_file"
		;;
	*)
		die "Unknown key type: $key_type"
		;;
	esac

	notice "Successfully imported $key_type key from $key_file to $dest_key"
}




		import-key) text="* DISABLED *
  import-key <key-type> <key-name> <commonName>
      Import a pre-existing TLS key <key-name> to EasyTLS directory.

      <key-type> is one of the supported TLS key types:
      tls-auth, tls-crypt or tls-crypt-v2.

      Examples (Using default PKI directory):

      Importing TLS-Auth or TLS-Crypt keys renames the key file as shown:

        * 'import-key tls-auth ./ta.key'
          Imported key name: ./pki/easytls/tls-auth.key

        * 'import-key tls-crypt ./tc.key'
          Imported key name: ./pki/easytls/tls-crypt.key

      TLS-crypt-v2 keys must be named after the commonName of the entity:
      (Default <commonName> is <key-name>)

        * 'import-key tls-crypt-v2 ./serv-v2.key server'
          Imported key name: ./pki/easytls/server-tls-crypt-v2.key

        * 'import-key tls-crypt-v2 ./cli2-v2.key client02'
          Imported key name: ./pki/easytls/client02-tls-crypt-v2.key

        * DISABLED *" ;;


